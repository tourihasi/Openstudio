{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP4aQouXNFd7oJVf1mr3lwx",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/tourihasi/Openstudio/blob/main/OpenstuidioAPI_%E8%A8%AD%E5%82%99%E6%83%85%E5%A0%B1%E3%81%AE%E5%BC%95%E7%B6%99%E3%81%8E\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 939
        },
        "id": "nlRScGuelu9l",
        "outputId": "94a217b3-4db6-4ddd-d0ec-d1caa86c77f8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "”引き継ぐモデルデータを選択してください”（HVACあり）\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-f21d15d0-91b3-498a-9c6d-8c0bb6816504\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-f21d15d0-91b3-498a-9c6d-8c0bb6816504\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving 下妻_空調.osm to 下妻_空調 (14).osm\n",
            "Source OSM : 下妻_空調 (14).osm\n",
            "“システムを付加するモデルを選択してください”（gbXML取込後）\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-f67e472d-a686-4827-a097-ee9d9aacdcc3\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-f67e472d-a686-4827-a097-ee9d9aacdcc3\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving 90度回転.osm to 90度回転 (14).osm\n",
            "Target OSM : 90度回転 (14).osm\n",
            "[Clone] VRF: 〇EHP-2-2\n",
            "[Clone] VRF: 〇EHP-2-1\n",
            "[Clone] VRF: 〇EHP-1-4-1\n",
            "[Clone] VRF: 〇EHP-1-3-W\n",
            "[Clone] VRF: 〇EHP-1-4-2\n",
            "[Clone] VRF: 〇EHP-1-3-M\n",
            "[Clone] VRF: EHP-2-3\n",
            "[Clone] VRF: 〇EHP-1-2\n",
            "[Clone] VRF: EHP-1-1\n",
            "[Clone] VRF Terminal: VRF Zone Terminal\n",
            "[Clone] VRF Terminal: EHP-2-3-1\n",
            "[Clone] VRF Terminal: EHP-2-2-2\n",
            "[Clone] VRF Terminal: EHP-2-1-2\n",
            "[Clone] VRF Terminal: EHP-2-2-1\n",
            "[Clone] VRF Terminal: EHP-2-1-1\n",
            "[Clone] VRF Terminal: EHP-1-4-2 1\n",
            "[Clone] VRF Terminal: EHP-1-3-1-W\n",
            "[Clone] VRF Terminal: VRF Zone Terminal 1\n",
            "[Clone] VRF Terminal: EHP-1-4-1\n",
            "[Clone] VRF Terminal: EHP-1-3-1-M\n",
            "[Clone] VRF (outdoor): 〇EHP-2-2 -> 〇EHP-2-2 1\n",
            "[Clone] VRF (outdoor): 〇EHP-2-1 -> 〇EHP-2-1 1\n",
            "[Clone] VRF (outdoor): 〇EHP-1-4-1 -> 〇EHP-1-4-1 1\n",
            "[Clone] VRF (outdoor): 〇EHP-1-3-W -> 〇EHP-1-3-W 1\n",
            "[Clone] VRF (outdoor): 〇EHP-1-4-2 -> 〇EHP-1-4-2 1\n",
            "[Clone] VRF (outdoor): 〇EHP-1-3-M -> 〇EHP-1-3-M 1\n",
            "[Clone] VRF (outdoor): EHP-2-3 -> EHP-2-3 1\n",
            "[Clone] VRF (outdoor): 〇EHP-1-2 -> 〇EHP-1-2 1\n",
            "[Clone] VRF (outdoor): EHP-1-1 -> EHP-1-1 1\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "'ZoneHVACTerminalUnitVariableRefrigerantFlow' object has no attribute 'airConditionerVariableRefrigerantFlow'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-3999445183.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     55\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mterm_src\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msrc_m\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetZoneHVACTerminalUnitVariableRefrigerantFlows\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m     \u001b[0mterm_dst\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mterm_src\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclone\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdst_m\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_ZoneHVACTerminalUnitVariableRefrigerantFlow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 57\u001b[0;31m     \u001b[0mparent_opt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mterm_src\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mairConditionerVariableRefrigerantFlow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Optional\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mparent_opt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m         \u001b[0mparent_src\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparent_opt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'ZoneHVACTerminalUnitVariableRefrigerantFlow' object has no attribute 'airConditionerVariableRefrigerantFlow'"
          ]
        }
      ],
      "source": [
        "# ================= Colab: PlantLoop/AirLoop を“複製のみ” =================\n",
        "# 0) インストール\n",
        "!pip -q install openstudio\n",
        "\n",
        "import openstudio as osd\n",
        "from google.colab import files\n",
        "\n",
        "def load_model(path: str) -> osd.model.Model:\n",
        "    m = osd.model.Model.load(osd.path(path))\n",
        "    if m.is_initialized():\n",
        "        return m.get()\n",
        "    raise RuntimeError(f\"OpenStudio Model の読み込みに失敗: {path}\")\n",
        "\n",
        "# 1) 供与側（HVACあり）をアップロード\n",
        "print(\"”引き継ぐモデルデータを選択してください”（HVACあり）\")\n",
        "uploaded_src = files.upload()\n",
        "assert uploaded_src, \"ファイルがアップロードされていません。\"\n",
        "src_candidates = [n for n in uploaded_src.keys() if n.lower().endswith(\".osm\")]\n",
        "assert src_candidates, \"拡張子 .osm のファイルが見つかりません。\"\n",
        "src = src_candidates[0]  # ラベルに依らず、最初の .osm を採用\n",
        "print(\"Source OSM :\", src)\n",
        "\n",
        "# 2) 受け側（gbXML取込後）をアップロード\n",
        "print(\"“システムを付加するモデルを選択してください”（gbXML取込後）\")\n",
        "uploaded_dst = files.upload()\n",
        "assert uploaded_dst, \"ファイルがアップロードされていません。\"\n",
        "dst_candidates = [n for n in uploaded_dst.keys() if n.lower().endswith(\".osm\")]\n",
        "assert dst_candidates, \"拡張子 .osm のファイルが見つかりません。\"\n",
        "dst = dst_candidates[0]  # ラベルに依らず、最初の .osm を採用\n",
        "print(\"Target OSM :\", dst)\n",
        "\n",
        "# 3) モデル読み込み\n",
        "src_m = load_model(src)\n",
        "dst_m = load_model(dst)\n",
        "\n",
        "# 室外機\n",
        "for vrf in src_m.getAirConditionerVariableRefrigerantFlows():\n",
        "\n",
        "    _ = vrf.clone(dst_m)\n",
        "    print(\"[Clone] VRF:\", vrf.nameString())\n",
        "\n",
        "# 室内機\n",
        "for term in src_m.getZoneHVACTerminalUnitVariableRefrigerantFlows():\n",
        "    _ = term.clone(dst_m)\n",
        "    print(\"[Clone] VRF Terminal:\", term.nameString())\n",
        "\n",
        "# --- 1) VRF親機を clone & マップ化 ---\n",
        "vrf_map = {}\n",
        "for vrf_src in src_m.getAirConditionerVariableRefrigerantFlows():\n",
        "    vrf_dst = vrf_src.clone(dst_m).to_AirConditionerVariableRefrigerantFlow().get()\n",
        "    vrf_map[str(vrf_src.handle())] = vrf_dst\n",
        "    print(\"[Clone] VRF (outdoor):\", vrf_src.nameString(), \"->\", vrf_dst.nameString())\n",
        "\n",
        "# --- 2) VRF端末を clone & 親に再接続 ---\n",
        "for term_src in src_m.getZoneHVACTerminalUnitVariableRefrigerantFlows():\n",
        "    term_dst = term_src.clone(dst_m).to_ZoneHVACTerminalUnitVariableRefrigerantFlow().get()\n",
        "    parent_opt = term_src.airConditionerVariableRefrigerantFlow()  # Optional\n",
        "    if parent_opt.is_initialized():\n",
        "        parent_src = parent_opt.get()\n",
        "        parent_dst = vrf_map.get(str(parent_src.handle()))\n",
        "        if parent_dst:\n",
        "            parent_dst.addTerminal(term_dst)\n",
        "            print(\"[Link ]\", term_dst.nameString(), \"->\", parent_dst.nameString())\n",
        "        else:\n",
        "            print(\"[Warn ] 対応する親VRFが見つかりません:\", term_src.nameString())\n",
        "\n",
        "for fc in src_m.getZoneHVACFourPipeFanCoils():\n",
        "    _ = fc.clone(dst_m)\n",
        "    print(\"[Clone] FanCoil:\", fc.nameString())\n",
        "\n",
        "for ptac in src_m.getZoneHVACPackagedTerminalAirConditioners():\n",
        "    _ = ptac.clone(dst_m)\n",
        "    print(\"[Clone] PTAC:\", ptac.nameString())\n",
        "\n",
        "for pthp in src_m.getZoneHVACPackagedTerminalHeatPumps():\n",
        "    _ = pthp.clone(dst_m)\n",
        "    print(\"[Clone] PTHP:\", pthp.nameString())\n",
        "\n",
        "# 6) 名前重複の整理 & 保存\n",
        "\n",
        "OUT = \"target_with_HVAC.osm\"\n",
        "dst_m.save(osd.path(OUT), True)\n",
        "print(\"Saved:\", OUT)\n",
        "\n",
        "# 7) ダウンロード\n",
        "files.download(OUT)\n",
        "# ======================================================================\n"
      ]
    }
  ]
}