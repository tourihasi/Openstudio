{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMQo0/Cl4X5H5ZqL7LWjudQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/tourihasi/Openstudio/blob/main/GBxml_%E5%A4%89%E4%BD%8D%E5%A4%89%E6%95%B0\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 182
        },
        "id": "4V4Mwad1T4UB",
        "outputId": "393fd9e3-457a-40db-e994-ba49f944b135"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "入力 gbXML（.xml）を選択してアップロードしてください（複数可）…\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-8b3949f3-0835-4fa6-91e6-6b54f7951658\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-8b3949f3-0835-4fa6-91e6-6b54f7951658\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving ★00-23-1076_D_R24_下妻物流_アタッチ解除.xml to ★00-23-1076_D_R24_下妻物流_アタッチ解除.xml\n",
            "\n",
            "処理中: ★00-23-1076_D_R24_下妻物流_アタッチ解除.xml\n",
            "出力: ★00-23-1076_D_R24_下妻物流_アタッチ解除_rot_ANGLE_DEG_cw_rigid.xml\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_fca7b44f-3812-46ca-8f7b-b2374c75d98c\", \"\\u260500-23-1076_D_R24_\\u4e0b\\u59bb\\u7269\\u6d41_\\u30a2\\u30bf\\u30c3\\u30c1\\u89e3\\u9664_rot_ANGLE_DEG_cw_rigid.xml\", 2313344)"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "完了：選択したファイルの回転とダウンロードが終了しました。\n"
          ]
        }
      ],
      "source": [
        "# Google Colab 用：エクスプローラーから選択 → gbXMLを 90度右回り（時計回り）回転 → .xml でダウンロード\n",
        "# - MODE = \"rigid\"       : 建物全体を一体のまま90°回転（推奨）\n",
        "# - MODE = \"per_surface\" : 各Surfaceを個別の重心で90°回転\n",
        "# - Azimuth は +90°（360でラップ）\n",
        "# - Surface/PlanarGeometry/PolyLoop と Opening/PlanarGeometry/PolyLoop のXY, および RectangularGeometry/CartesianPoint のXYを回転\n",
        "# - Z座標は不変\n",
        "# - 名前空間を既定登録して ns0: を抑制、出力拡張子は .xml\n",
        "\n",
        "import os\n",
        "import math\n",
        "import xml.etree.ElementTree as ET\n",
        "from typing import List, Tuple, Optional\n",
        "from statistics import mean\n",
        "from google.colab import files  # ファイル選択・ダウンロード\n",
        "\n",
        "# ========= 設定（必要に応じて変更） =========\n",
        "MODE = \"rigid\"          # \"rigid\" or \"per_surface\"\n",
        "SURFACE_ID_FILTER = None  # 例: \"aim8415\" （None なら全Surface）\n",
        "\n",
        "# ========= 変位角はここで設定する =========\n",
        "ANGLE_DEG = 270\n",
        "\n",
        "# ========= ユーティリティ =========\n",
        "def q(tag: str, ns: Optional[str]) -> str:\n",
        "    return f\"{{{ns}}}{tag}\" if ns else tag\n",
        "\n",
        "def detect_namespace(root: ET.Element) -> Optional[str]:\n",
        "    if root.tag.startswith(\"{\"):\n",
        "        return root.tag.split(\"}\")[0][1:]\n",
        "    return None\n",
        "\n",
        "def parse_coords(point_el: ET.Element) -> Tuple[float, float, float]:\n",
        "    coords = [float(c.text.strip()) for c in list(point_el)]\n",
        "    if len(coords) != 3:\n",
        "        raise ValueError(\"CartesianPoint は <Coordinate>×3 必須です\")\n",
        "    return coords[0], coords[1], coords[2]\n",
        "\n",
        "def write_coords(point_el: ET.Element, xyz: Tuple[float, float, float]) -> None:\n",
        "    for i, val in enumerate(xyz):\n",
        "        text = f\"{val:.8f}\".rstrip(\"0\").rstrip(\".\")\n",
        "        point_el[i].text = \"0\" if text in (\"\", \"-0\") else text\n",
        "\n",
        "def centroid_xy(points_xy: List[Tuple[float, float]]) -> Tuple[float, float]:\n",
        "    if not points_xy:\n",
        "        return (0.0, 0.0)\n",
        "    return (mean([p[0] for p in points_xy]), mean([p[1] for p in points_xy]))\n",
        "\n",
        "def rotate_clockwise_xy(x: float, y: float, px: float, py: float, angle_deg: float) -> Tuple[float, float]:\n",
        "    dx, dy = x - px, y - py\n",
        "    if abs(angle_deg - 180.0) < 1e-12:\n",
        "        return (px - dx, py - dy)  # 180°は最適化（時計／反時計同じ）\n",
        "    if abs(angle_deg - 90.0) < 1e-12:\n",
        "        return (px + dy, py - dx)\n",
        "    th = math.radians(angle_deg)\n",
        "    c, s = math.cos(th), math.sin(th)       # 時計回り: [[c, s],[-s, c]]\n",
        "    rx =  c*dx + s*dy\n",
        "    ry = -s*dx + c*dy\n",
        "    return (px + rx, py + ry)\n",
        "\n",
        "def update_azimuth_plus_angle(rect_el: ET.Element, ns: Optional[str], angle_deg: float) -> None:\n",
        "    az = rect_el.find(q(\"Azimuth\", ns))\n",
        "    if az is not None and az.text and az.text.strip():\n",
        "        try:\n",
        "            val = float(az.text.strip())\n",
        "            new_az = (val + angle_deg) % 360.0\n",
        "            t = f\"{new_az:.2f}\".rstrip(\"0\").rstrip(\".\")\n",
        "            az.text = \"0\" if t in (\"\", \"-0\") else t\n",
        "        except ValueError:\n",
        "            pass\n",
        "\n",
        "# ========= per_surface回転ロジック =========\n",
        "def get_surface_pivot(surface: ET.Element, ns: Optional[str]) -> Tuple[float, float]:\n",
        "    # 優先: PlanarGeometry/PolyLoop のXY重心 → RectangularGeometry/CartesianPoint → (0,0)\n",
        "    planar = surface.find(q(\"PlanarGeometry\", ns))\n",
        "    if planar is not None:\n",
        "        poly = planar.find(q(\"PolyLoop\", ns))\n",
        "        if poly is not None:\n",
        "            pts = []\n",
        "            for cp in poly.findall(q(\"CartesianPoint\", ns)):\n",
        "                x, y, z = parse_coords(cp)\n",
        "                pts.append((x, y))\n",
        "            if pts:\n",
        "                return centroid_xy(pts)\n",
        "    rect = surface.find(q(\"RectangularGeometry\", ns))\n",
        "    if rect is not None:\n",
        "        base = rect.find(q(\"CartesianPoint\", ns))\n",
        "        if base is not None:\n",
        "            bx, by, _ = parse_coords(base)\n",
        "            return (bx, by)\n",
        "    return (0.0, 0.0)\n",
        "\n",
        "def rotate_polyloop(polyloop_el: ET.Element, ns: Optional[str], pivot_xy: Tuple[float, float]) -> None:\n",
        "    px, py = pivot_xy\n",
        "    for cp in polyloop_el.findall(q(\"CartesianPoint\", ns)):\n",
        "        x, y, z = parse_coords(cp)\n",
        "        rx, ry = rotate_clockwise_xy(x, y, pivot_x, pivot_y, ANGLE_DEG)\n",
        "        write_coords(cp, (rx, ry, z))\n",
        "\n",
        "def rotate_surface_per_surface(surface: ET.Element, ns: Optional[str]) -> None:\n",
        "    pivot_x, pivot_y = get_surface_pivot(surface, ns)\n",
        "    # RectangularGeometry: Azimuth+90, 基準点XY回転\n",
        "    rect = surface.find(q(\"RectangularGeometry\", ns))\n",
        "    if rect is not None:\n",
        "        update_azimuth_plus_angle(rect, ns, ANGLE_DEG)\n",
        "        base = rect.find(q(\"CartesianPoint\", ns))\n",
        "        if base is not None:\n",
        "            bx, by, bz = parse_coords(base)\n",
        "            rx, ry = rotate_clockwise_xy(bx, by, pivot_x, pivot_y, ANGLE_DEG)\n",
        "            write_coords(base, (rx, ry, bz))\n",
        "    # Surface/PlanarGeometry/PolyLoop\n",
        "    planar = surface.find(q(\"PlanarGeometry\", ns))\n",
        "    if planar is not None:\n",
        "        poly = planar.find(q(\"PolyLoop\", ns))\n",
        "        if poly is not None:\n",
        "            rotate_polyloop(poly, ns, (pivot_x, pivot_y))\n",
        "    # Opening\n",
        "    for op in surface.findall(q(\"Opening\", ns)):\n",
        "        op_pg = op.find(q(\"PlanarGeometry\", ns))\n",
        "        if op_pg is not None:\n",
        "            op_poly = op_pg.find(q(\"PolyLoop\", ns))\n",
        "            if op_poly is not None:\n",
        "                rotate_polyloop(op_poly, ns, (pivot_x, pivot_y))\n",
        "\n",
        "# ========= rigid回転ロジック =========\n",
        "def collect_target_surfaces(root: ET.Element, ns: Optional[str]) -> List[ET.Element]:\n",
        "    surfaces = []\n",
        "    for s in root.iter(q(\"Surface\", ns)):\n",
        "        sid = s.get(\"id\") or (s.get(q(\"id\", ns)) if ns else None)\n",
        "        if SURFACE_ID_FILTER and sid != SURFACE_ID_FILTER:\n",
        "            continue\n",
        "        surfaces.append(s)\n",
        "    return surfaces\n",
        "\n",
        "def collect_all_xy_points(surfaces: List[ET.Element], ns: Optional[str]) -> List[Tuple[ET.Element, int, float, float]]:\n",
        "    \"\"\"\n",
        "    すべての対象Surface内の XY座標を収集\n",
        "    戻り値: [(point_element, coord_index, x, y), ...]\n",
        "    coord_index: 0->X, 1->Y を持つ CartesianPoint の <Coordinate> 要素のインデックス\n",
        "    \"\"\"\n",
        "    refs = []\n",
        "    # Surface/PlanarGeometry/PolyLoop + Opening/PlanarGeometry/PolyLoop\n",
        "    for s in surfaces:\n",
        "        for cp in s.findall(f\".//{q('PlanarGeometry', ns)}/{q('PolyLoop', ns)}/{q('CartesianPoint', ns)}\"):\n",
        "            coords = cp.findall(q(\"Coordinate\", ns))\n",
        "            if len(coords) >= 2:\n",
        "                x = float(coords[0].text.strip())\n",
        "                y = float(coords[1].text.strip())\n",
        "                refs.append((cp, 0, x, y))  # 0 はダミー（書き戻しに cp を使う）\n",
        "        # RectangularGeometry/CartesianPoint\n",
        "        for cp in s.findall(f\".//{q('RectangularGeometry', ns)}/{q('CartesianPoint', ns)}\"):\n",
        "            coords = cp.findall(q(\"Coordinate\", ns))\n",
        "            if len(coords) >= 2:\n",
        "                x = float(coords[0].text.strip())\n",
        "                y = float(coords[1].text.strip())\n",
        "                refs.append((cp, 0, x, y))\n",
        "    return refs\n",
        "\n",
        "def rotate_all_points_rigid(surfaces: List[ET.Element], ns: Optional[str]) -> None:\n",
        "    # 1) 全XY点を収集 → 全体重心を回転中心に\n",
        "    refs = collect_all_xy_points(surfaces, ns)\n",
        "    if not refs:\n",
        "        return\n",
        "    cx = mean([r[2] for r in refs])\n",
        "    cy = mean([r[3] for r in refs])\n",
        "\n",
        "    # 2) 回転して書き戻し\n",
        "    for cp, _, x, y in refs:\n",
        "        rx, ry = rotate_clockwise_xy(x, y, cx, cy, ANGLE_DEG)\n",
        "        coords = cp.findall(q(\"Coordinate\", ns))\n",
        "        coords[0].text = f\"{rx:.8f}\".rstrip(\"0\").rstrip(\".\") or \"0\"\n",
        "        coords[1].text = f\"{ry:.8f}\".rstrip(\"0\").rstrip(\".\") or \"0\"\n",
        "\n",
        "    # 3) Azimuth +90°\n",
        "    for s in surfaces:\n",
        "        rect = s.find(q(\"RectangularGeometry\", ns))\n",
        "        if rect is not None:\n",
        "            update_azimuth_plus_angle(rect, ns, ANGLE_DEG)\n",
        "\n",
        "# ========= メイン処理（アップロード → 処理 → ダウンロード） =========\n",
        "print(\"入力 gbXML（.xml）を選択してアップロードしてください（複数可）…\")\n",
        "uploaded = files.upload()\n",
        "if not uploaded:\n",
        "    raise SystemExit(\"ファイルが選択されませんでした。\")\n",
        "\n",
        "for in_name in uploaded.keys():\n",
        "    print(f\"\\n処理中: {in_name}\")\n",
        "    tree = ET.parse(in_name)\n",
        "    root = tree.getroot()\n",
        "    ns = detect_namespace(root)\n",
        "    if ns:\n",
        "        ET.register_namespace(\"\", ns)  # ns0: を抑制して既定名前空間にする\n",
        "\n",
        "    # 対象Surfaceを抽出\n",
        "    surfaces = collect_target_surfaces(root, ns)\n",
        "\n",
        "    if MODE == \"per_surface\":\n",
        "        for s in surfaces:\n",
        "            rotate_surface_per_surface(s, ns)\n",
        "    elif MODE == \"rigid\":\n",
        "        rotate_all_points_rigid(surfaces, ns)\n",
        "    else:\n",
        "        raise SystemExit(f\"未知のMODEです: {MODE}\")\n",
        "\n",
        "    # 出力ファイル名作成（.xml固定）\n",
        "    base, _ = os.path.splitext(in_name)\n",
        "    out_name = f\"{base}_rot_ANGLE_DEG_cw_{MODE}.xml\"\n",
        "    tree.write(out_name, encoding=\"utf-8\", xml_declaration=True)\n",
        "    print(f\"出力: {out_name}\")\n",
        "\n",
        "    # ダウンロード\n",
        "    files.download(out_name)\n",
        "print(\"\\n完了：選択したファイルの回転とダウンロードが終了しました。\")\n"
      ]
    }
  ]
}