{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO85V3atdDvR8ih+/NdKy+Y",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/tourihasi/Openstudio/blob/main/%E2%91%A4CVM%E3%81%B8%E3%81%AEHandle%E4%BB%98%E4%B8%8E\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 165
        },
        "id": "UUQLP19dH0iX",
        "outputId": "3b217ea7-ce49-4cc2-becb-b847ca437025"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-0df0bf61-d1fb-4dd2-9231-167c672e3915\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-0df0bf61-d1fb-4dd2-9231-167c672e3915\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving 251001_2.osm to 251001_2.osm\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_6ecf851d-a283-4abe-b8c0-2d9a70813559\", \"251001_2_fixed.osm\", 8373662)"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "=== 処理結果 ===\n",
            "- Always On Discrete の Handle: {a09224b6-3bbb-45a8-8b74-2ebfde383bf7}\n",
            "- 追記ブロック数: 2（TypeLimits/Constant を必要に応じて追加）\n",
            "- 更新した Controller:MechanicalVentilation 件数: 24\n",
            "- 出力: 251001_2_fixed.osm\n"
          ]
        }
      ],
      "source": [
        "# ① 必要モジュール（標準）とColab入出力\n",
        "import re, uuid\n",
        "from google.colab import files\n",
        "\n",
        "# ② ユーティリティ：GUID（Handle）生成（{xxxxxxxx-....} 形式、小文字）\n",
        "def new_handle() -> str:\n",
        "    return \"{\" + str(uuid.uuid4()).lower() + \"}\"\n",
        "\n",
        "# ③ OSMファイルをアップロード＆読み込み（UTF-8想定）\n",
        "uploaded = files.upload()\n",
        "osm_name = next(k for k in uploaded.keys() if k.lower().endswith(\".osm\"))\n",
        "text = uploaded[osm_name].decode(\"utf-8\")\n",
        "\n",
        "# ④ 既存の「On/Off」ScheduleTypeLimits を探索（Name一致）\n",
        "pat_type_limits = re.compile(\n",
        "    r\"OS:ScheduleTypeLimits,\\s*\"\n",
        "    r\"\\n\\s*({[0-9a-f\\-]+}),\\s*!-\\s*Handle\"\n",
        "    r\"\\n\\s*([^\\n,]+),\\s*!-\\s*Name\", re.DOTALL\n",
        ")\n",
        "has_onoff_limits = any(m.group(2).strip() == \"On/Off\" for m in pat_type_limits.finditer(text))\n",
        "onoff_limits_handle = None\n",
        "if has_onoff_limits:\n",
        "    # ④-1 既存の On/Off の Handle を控える（最初の1件）\n",
        "    for m in pat_type_limits.finditer(text):\n",
        "        if m.group(2).strip() == \"On/Off\":\n",
        "            onoff_limits_handle = m.group(1).strip()\n",
        "            break\n",
        "\n",
        "# ⑤ 既存の「Always On Discrete」スケジュール（Constant/Ruleset）を探索\n",
        "pat_sched = re.compile(\n",
        "    r\"OS:Schedule:(?:Constant|Ruleset),\\s*\"\n",
        "    r\"\\n\\s*({[0-9a-f\\-]+}),\\s*!-\\s*Handle\"\n",
        "    r\"\\n\\s*([^\\n,]+),\\s*!-\\s*Name\", re.DOTALL\n",
        ")\n",
        "always_on_handle = None\n",
        "for m in pat_sched.finditer(text):\n",
        "    if m.group(2).strip() == \"Always On Discrete\":\n",
        "        always_on_handle = m.group(1).strip()\n",
        "        break\n",
        "\n",
        "# ⑥ 無ければ TypeLimits（On/Off）を追記 → Always On Discrete（Schedule:Constant=1）を新規作成\n",
        "added_blocks = []\n",
        "if always_on_handle is None:\n",
        "    # ⑥-1 On/Off TypeLimits が無ければ新規追記\n",
        "    if not has_onoff_limits:\n",
        "        onoff_limits_handle = new_handle()\n",
        "        block_limits = (\n",
        "            \"OS:ScheduleTypeLimits,\\n\"\n",
        "            f\"  {onoff_limits_handle},  !- Handle\\n\"\n",
        "            \"  On/Off,                 !- Name\\n\"\n",
        "            \"  0,                      !- Lower Limit Value\\n\"\n",
        "            \"  1,                      !- Upper Limit Value\\n\"\n",
        "            \"  Discrete;               !- Numeric Type\\n\"\n",
        "        )\n",
        "        added_blocks.append(block_limits)\n",
        "    # ⑥-2 Always On Discrete を Constant=1 で新規作成\n",
        "    if onoff_limits_handle is None:\n",
        "        # ⑥-2a 念のため、既存On/OffのHandleを再探索（他で定義済みの可能性）\n",
        "        for m in pat_type_limits.finditer(text):\n",
        "            if m.group(2).strip() == \"On/Off\":\n",
        "                onoff_limits_handle = m.group(1).strip()\n",
        "                break\n",
        "        # ⑥-2b それでも無ければ新規作成（上で作ったはずだが二重保険）\n",
        "        if onoff_limits_handle is None:\n",
        "            onoff_limits_handle = new_handle()\n",
        "            block_limits2 = (\n",
        "                \"OS:ScheduleTypeLimits,\\n\"\n",
        "                f\"  {onoff_limits_handle},  !- Handle\\n\"\n",
        "                \"  On/Off,                 !- Name\\n\"\n",
        "                \"  0,                      !- Lower Limit Value\\n\"\n",
        "                \"  1,                      !- Upper Limit Value\\n\"\n",
        "                \"  Discrete;               !- Numeric Type\\n\"\n",
        "            )\n",
        "            added_blocks.append(block_limits2)\n",
        "    always_on_handle = new_handle()\n",
        "    block_sched = (\n",
        "        \"OS:Schedule:Constant,\\n\"\n",
        "        f\"  {always_on_handle},      !- Handle\\n\"\n",
        "        \"  Always On Discrete,      !- Name\\n\"\n",
        "        f\"  {onoff_limits_handle},    !- Schedule Type Limits Name\\n\"\n",
        "        \"  1;                       !- Value\\n\"\n",
        "    )\n",
        "    added_blocks.append(block_sched)\n",
        "\n",
        "# ⑦ 末尾に新規ブロックをまとめて追記（必要時のみ）\n",
        "if added_blocks:\n",
        "    text = text.rstrip() + \"\\n\\n\" + \"\\n\\n\".join(added_blocks) + \"\\n\"\n",
        "\n",
        "# ⑧ CMVブロック（OS:Controller:MechanicalVentilation, ... ;）を抽出し、Availability行を置換\n",
        "pat_cmv_block = re.compile(r\"OS:Controller:MechanicalVentilation,.*?;\", re.DOTALL)\n",
        "pat_avail_line = re.compile(r\"(\\n\\s*)(?:{[0-9a-f\\-]+}|)\\s*,\\s*!\\-\\s*Availability Schedule[^\\n]*\")\n",
        "\n",
        "updated_count = 0\n",
        "def _patch_cmv_block(m):\n",
        "    global updated_count\n",
        "    blk = m.group(0)\n",
        "    if pat_avail_line.search(blk):\n",
        "        # ⑧-1 既存の Availability 行を、Always On のGUIDで1回だけ置換\n",
        "        new_line = r\"\\1\" + always_on_handle + \",                              !- Availability Schedule\"\n",
        "        new_blk = pat_avail_line.sub(new_line, blk, count=1)\n",
        "        updated_count += 1\n",
        "        return new_blk\n",
        "    else:\n",
        "        # ⑧-2 もし行が見当たらない場合は変更せず（安全側）\n",
        "        return blk\n",
        "\n",
        "new_text = pat_cmv_block.sub(_patch_cmv_block, text)\n",
        "\n",
        "# ⑨ 保存＆ダウンロード\n",
        "out_name = osm_name[:-4] + \"_fixed.osm\"\n",
        "with open(out_name, \"w\", encoding=\"utf-8\") as f:\n",
        "    f.write(new_text)\n",
        "files.download(out_name)\n",
        "\n",
        "# ⑩ レポート\n",
        "print(\"=== 処理結果 ===\")\n",
        "print(f\"- Always On Discrete の Handle: {always_on_handle}\")\n",
        "if added_blocks:\n",
        "    print(f\"- 追記ブロック数: {len(added_blocks)}（TypeLimits/Constant を必要に応じて追加）\")\n",
        "else:\n",
        "    print(\"- 既存の Always On Discrete を使用（新規追記なし）\")\n",
        "print(f\"- 更新した Controller:MechanicalVentilation 件数: {updated_count}\")\n",
        "print(f\"- 出力: {out_name}\")\n"
      ]
    }
  ]
}